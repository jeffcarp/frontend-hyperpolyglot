- name:
  comparisons:
  - label: Version used
    frameworks:
      react: 15.0.2
      angular2: 2.0.0-beta.17
      angular1: 1.5.5
      ember: 2.5.1
      polymer: 1.4.0
      vue: 1.0.24
  - label: Language used
    frameworks:
      react: ES6
      angular2: TypeScript
      angular1: ES5
      ember: ES6
      polymer: ES6
      vue: ES6

- name: Templating logic
  comparisons:
  - label: Text interpolation
    frameworks:
      react: "{ message }"
      angular2: "{{ message }}"
      angular1: "{{ message }}"
      ember: "{{ message }}"
      polymer: "{{ message }}"
      vue: "{{ message }}"
    remarks: |
      - **Polymer:** see [Binding to text content](https://www.polymer-project.org/1.0/docs/devguide/data-binding.html#binding-to-text-content).
  - label: Transform interpolation
    frameworks:
      react: "{ filter(message) }"
      angular2: "{{ message | filter }}"
      angular1: "{{ message | filter }}"
      ember: "{{filter message }}"
      polymer: "{{ filter(message) }}"
      vue: "{{ message | filter }}"
    remarks: |
      **React and Polymer** don't have the concept of 'filters' or 'pipes', but you can use a simple function to acheive the same result.

      - **Vue:** See [Filters](https://vuejs.org/guide/syntax.html#Filters)
      - **Ember:** See [Helpers](https://guides.emberjs.com/v2.5.0/templates/handlebars-basics/#toc_helpers)
  - label: Transform with arguments
    frameworks:
      react: "{ filter(message, 'arg1', arg2) }"
      angular2: "{{ message | filter:'arg1':arg2 }}"
      angular1: "{{ message | filter:'arg1':arg2 }}"
      ember: "{{filter message 'arg1' arg2 }}"
      polymer: "{{ filter(message, 'arg1', arg2) }}"
      vue: "{{ message | filter 'arg1' arg2 }}"
    remarks: |
      - **Angular 2:** See [Pipes](https://angular.io/docs/ts/latest/guide/pipes.html)
      - **Angular 1:** See [Filter](https://docs.angularjs.org/api/ng/filter/filter)
      - **Vue:** See [Filters](https://vuejs.org/guide/syntax.html#Filters)
      - **Ember:** See [Helpers](https://guides.emberjs.com/v2.5.0/templates/handlebars-basics/#toc_helpers)
  - label: Bind text content
    frameworks:
      react: <div textContent={message}></div>
      angular2: <div [textContent]="message"></div>
      angular1: <div ng-bind="message"></div>
      ember:
      polymer: <div textContent$="{{ textContent }}"></div>
      vue: <div v-text="message"></div>
    remarks: |
      - **Angular 1:** See [`ngBind`](https://docs.angularjs.org/api/ng/directive/ngBind).
      - **Polymer:** See [Annotated attribute binding](https://www.polymer-project.org/1.0/docs/devguide/data-binding.html#attribute-binding.)
  - label: Bind href
    frameworks:
      react: <a href={ url }></a>
      angular2: <a [href]="url"></a>
      angular1: <a ng-href="{{ url }}"></a>
      ember: <a href="{{url}}"></a>
      polymer: <a href$="{{ url }}"></a>
      vue: <a v-bind:href="url"></a>
    remarks: |
      - **Angular 2:** See [bind to the `href` property](https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#!#bind-to-the-href-property).
      - **Angular 1:** See [`ngHref`](https://docs.angularjs.org/api/ng/directive/ngHref).
      - **Polymer:** See [Binding to native element attributes](https://www.polymer-project.org/1.0/docs/devguide/data-binding.html#native-binding).
      - **Vue:** See [Directives > Arguments](https://vuejs.org/guide/syntax.html#Arguments).
  - label: Dangerous raw HTML output
    frameworks:
      react: "<div \n  dangerouslySetInnerHTML={{\n    __html: raw_html\n  }} />"
      angular2: <div [innerHTML]="raw_html"></div>
      angular1: <div ng-bind-html="raw_html"></div>
      ember: <div>{{{ raw_html }}}</div>
      polymer: <div content$="{{ raw_html }}"></div>
      vue: <div>{{{ raw_html }}}</div>
    remarks: |
      Please don't use these in your programs. Filtering raw HTML on the server or in the browser will not protect you 100% against XSS. For a deeper look at the subject, please refer to the [Google Browser Security Handbook (PDF download)](https://storage.googleapis.com/google-code-attachments/browsersec/issue-8/comment-8/Google%20Browser%20Security%20Handbook.pdf) and the book [The Tangled Web: A Guide to Securing Modern Web Applications](http://lcamtuf.coredump.cx/tangled/).

      - **React:** See [Dangerously Set innerHTML](https://facebook.github.io/react/tips/dangerously-set-inner-html.html).
      - **Vue:** See [Raw HTML](https://vuejs.org/guide/syntax.html#Raw-HTML).
  - label: Bind attribute value
    frameworks:
      react: <div id={'item-' + id}></div>
      angular2: <div id="item-{{ id }}"></div>
      angular1: <div id="item-{{ id }}"></div>
      ember:
      polymer: <div id$="item-{{ id }}"></div>
      vue: <div id="item-{{ id }}"></div>
    remarks: |
      - **Angular 2:** See [Attribute, class, and style bindings](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#attribute-class-and-style-bindings)
      - **Vue:** See [Attributes](https://vuejs.org/guide/syntax.html#Attributes)
  - label: DOM add/remove
    frameworks:
      react: "{shouldShow && <div></div>}"
      angular2: <div *ngIf="shouldShow"></div>
      angular1: <div ng-if='shouldShow'></div>
      ember: "{{#if shouldShow}}<div></div>{{/if}}"
      polymer: <div dom-if='shouldShow'><div>
      vue: <div v-if='shouldShow'><div>
    remarks: |
      - **Angular 2:** See [Angular Cheat Sheet](https://angular.io/docs/ts/latest/guide/cheatsheet.html).
  - label: Repeat
    frameworks:
      react: "items.map(item => <div key={item.id} />)"
      angular2: <div *ngFor="let item of items"></div>
      angular1: <div ng-repeat="item in items"></div>
      ember: "{{#each items as |item}}<div></div>{{/each}}"
      polymer: "<template\n  is='dom-repeat'\n  items='{{items}}'>\n</template>"
      vue: <div v-for="item in items"></div>
    remarks: |
      - **Angular 1:** See [`ngRepeat`](https://docs.angularjs.org/api/ng/directive/ngRepeat).
      - **Polymer:** See [Template repeater (`dom-repeat`)](https://www.polymer-project.org/1.0/docs/devguide/templates.html#dom-repeat).
  - label: Bind event handler
    frameworks:
      react: <button onClick={clicked}>
      angular2: <button (click)="clicked()">
      angular1: <button ng-click="clicked()">
      ember: <button {{action 'clicked'}}>
      polymer: <button on-tap="clicked">
      vue: <button v-on:click="clicked">
    remarks: |
      - **Polymer:** See [Annotated event listener setup](https://www.polymer-project.org/1.0/docs/devguide/events.html#annotated-listeners).

- name: Components
  comparisons:
  - label: Define component ES6
    frameworks:
      react:
        js: class Polyglot extends React.Component
      angular2:
        js: "@Component({})class Polyglot {}"
      angular1:
        js: module.component('polyglot', {})
      ember:
        js: Ember.Component.extend({})
      polymer:
        js: class Polyglot extends HTMLElement
      vue:
        js: class Polyglot extends Vue
    remarks: |
      - **Polymer:** See [Building web components using ES6 classes](https://www.polymer-project.org/1.0/articles/es6.html)
      - **Vue:** See gist: [Vue.js + ES6](https://gist.github.com/k33g/f4ea54b6a2cf9555b959)
  - label: Define component ES5
    frameworks:
      react:
        js: React.createClass({})
      angular2:
        js: ng.core.Component({}).Class({})
      angular1:
        js: module.component('polyglot', {})
      ember:
        js: Ember.Component.extend({})
      polymer:
        js: Polymer({})
      vue:
        js: Vue.extend({})
    remarks: |
      - **Polymer:** See [Building web components using ES6 classes](https://www.polymer-project.org/1.0/articles/es6.html)
      - **Vue:** See gist: [Vue.js + ES6](https://gist.github.com/k33g/f4ea54b6a2cf9555b959)

- name: Component communication
  comparisons:
  - label: One-way data binding
    frameworks:
      react: <Child foo={bar} />
      angular2: <Child [foo]="bar" />
      angular1: <Child foo="{{ bar }}" />
      ember: "{{Child foo=(readonly bar) }}"
      polymer: '<Child foo="{{ bar }}" />'
      vue: <Child :foo='bar' />
    remarks: |
      - **Polymer:** The child component must also be set up to treat the property as read-only. Learn more about [data binding in Polymer](https://www.polymer-project.org/1.0/docs/devguide/data-binding.html).
  - label: String literal prop
    frameworks:
      react: <Child foo='bar' />
      angular2: <Child foo='bar' />
      angular1: <Child foo='bar' />
      ember: "{{Child foo='bar' }}"
      polymer: <Child foo='bar' />
      vue: <Child foo='bar' />
  - label: Two-way binding (native)
    frameworks:
      react:
        comment: not supported
      angular2: <input [(ngModel)]="foo" />
      angular1: <input ng-model="foo" />
      ember: "<input \n  value={{foo}}\n  onkeyup={{\n    action (mut foo) value='target.value'\n  }}\n  />"
      polymer: <input value="{{foo::input}}">
      vue: <input v-model="foo" />
    remarks: |
      - **Polymer:** See [Two-way binding to native elements](https://www.polymer-project.org/1.0/docs/devguide/data-binding.html#two-way-native).
  - label: Two-way binding (components)
    frameworks:
      react:
        comment: not supported
      angular2: <Child [(foo)]="bar" />
      angular1: <Child foo="bar" />
      ember: <Child foo=bar>
      polymer: "<Child foo='{{ bar }}' />\n<!-- and set notify: true -->"
      vue:
    remarks: |
      - **Polymer:** See [Property change notification and two-way binding](https://www.polymer-project.org/1.0/docs/devguide/data-binding.html#property-notification).
  - label: One-time binding
    frameworks:
      react:
        comment: not supported
      angular2:
        comment: not supported
      angular1: <Child foo="::bar" />
      ember:
        comment: not supported
      polymer: <Child foo="[[ bar ]]" />
      vue: <Child foo="{{* bar }}" />
    remarks: |
      When a property is passed down and never updated again.

      - **Angular 1:** See [One-time binding](https://docs.angularjs.org/guide/expression#one-time-binding).
      - **Polymer:** See [Creating a One Time Binding](https://github.com/PolymerLabs/polymer-patterns/blob/master/snippets/basics/creating-a-one-time-binding.html#L17) in polymer-patterns.

- name: Property validation
  comparisons:
  - label: Prop validation key
    frameworks:
      react:
        js: "{propTypes: {}}"
      angular2:
        comment: as types on @Input properties (below)
      angular1:
        comment: (no prop types)
      ember:
        js: "// requires ember-prop-types\n{propTypes: {}}"
      polymer:
        js: "{properties: {}}"
      vue:
        js: "{props: {}}"
    remarks: |
      The key in the component configuration object to define the expected type of a passed prop.

      ```
      class Polyglot extends React.Component {
        propTypes = {
          myNumber: React.propTypes.number
        }
      }
      ```

      - **React:** Learn more about [`propTypes` in React](https://facebook.github.io/react/docs/reusable-components.html#prop-validation).
      - **Angular 2:** Learn more about [Basic Types](https://www.typescriptlang.org/docs/handbook/basic-types.html) in TypeScript.
      - **Polymer:** Learn more about [declared properties in Polymer](https://www.polymer-project.org/1.0/docs/devguide/properties.html).
      - **Vue:** Learn more about [prop validation in Vue](https://vuejs.org/guide/components.html#Prop-Validation).
      - **Ember:** Learn more about [prop validation in Ember](https://github.com/ciena-blueplanet/ember-prop-types).
  - label: Prop validate Number
    frameworks:
      react:
        js: "{myNum: React.PropTypes.number}"
      angular2:
        js: "@Input() myNum: number;"
      angular1:
        comment: (no prop types)
      ember:
        js: "{myNum: PropTypes.number}"
      polymer:
        js: "{myNum: Number}"
      vue:
        js: "{myNum: Number}"
  - label: Prop validate String
    frameworks:
      react:
        js: "{myStr: React.PropTypes.string}"
      angular2:
        js: "@Input() myStr: string;"
      angular1:
        comment: (no prop types)
      ember:
        js: "{myStr: PropTypes.string}"
      polymer:
        js: "{myStr: String}"
      vue:
        js: "{myStr: String}"
  - label: Prop validate Array
    frameworks:
      react:
        js: "{myArr: React.PropTypes.array}"
      angular2:
        js: "@Input() myArr: Array;"
      angular1:
        comment: (no prop types)
      ember:
        js: "{myArr: PropTypes.array}"
      polymer:
        js: "{myArr: Array}"
      vue:
        js: "{myArr: Array}"
  - label: Prop validate Boolean
    frameworks:
      react:
        js: "{myBool: React.PropTypes.bool}"
      angular2:
        js: "@Input() myBool: boolean;"
      angular1:
        comment: (no prop types)
      ember:
        js: "{myBool: PropTypes.bool}"
      polymer:
        js: "{myBool: Boolean}"
      vue:
        js: "{myBool: Boolean}"
  - label: Prop validate Function
    frameworks:
      react:
        js: "{myFunc: React.PropTypes.func}"
      angular2:
        js: "@Input() myFunc: Function;"
      angular1:
        comment: (no prop types)
      ember:
        js: "{myFunc: PropTypes.func}"
      polymer:
        comment: not supported
      vue:
        comment: not supported
  - label: Prop validate Object
    frameworks:
      react:
        js: "{myObj: React.PropTypes.object}"
      angular2:
        js: "@Input() myObj: Object;"
      angular1:
        comment: (no prop types)
      ember:
        js: "{myObj: PropTypes.object}"
      polymer:
        js: "{myObj: Object}"
      vue:
        js: "{myObj: Object}"
  - label: Prop validate union
    frameworks:
      react:
        js: "{myVar: React.PropTypes.oneOfType([\n  React.PropTypes.string, \n  React.PropTypes.number\n])}"
      angular2:
        js: "@Input() myVar: string | number;"
      angular1:
        comment: (no prop types)
      ember:
        js: "{myVar: PropTypes.oneOfType([\n  PropTypes.string, \n  PropTypes.number\n])}"
      polymer:
      vue:
        js: "{myVar: [String, Number]}"
    remarks: |
      - **Angular 2:** [Advanced Types in TypeScript](https://www.typescriptlang.org/docs/handbook/advanced-types.html)

- name: Component lifecycle methods
  comparisons:
  - label: Initialized
    frameworks:
      react: componentWillMount
      angular2: ngOnInit
      angular1: $onInit
      ember: init
      polymer: created
      vue: created
    remarks: |
      - **React:** [`componentWillMount`](https://facebook.github.io/react/docs/component-specs.html#mounting-componentwillmount)
      - **Angular 1:** See [https://docs.angularjs.org/guide/component#component-based-application-architecture](https://docs.angularjs.org/guide/component#component-based-application-architecture).
  - label: DOM Ready
    frameworks:
      react: componentDidMount
      angular2: ngAfterContentInit
      angular1: $postLink
      ember: didInsertElement
      polymer: ready
      vue: ready
    remarks: |
      - **React:** [`componentDidMount`](https://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount)
  - label: On prop change
    frameworks:
      react: willReceiveProps
      angular2: ngOnChanges
      angular1: $onChanges
      ember: didReceiveAttrs
      polymer: attributeChanged
      vue:
        comment: none
    remarks: |
      - **React:** [`willReceiveProps`](https://facebook.github.io/react/docs/component-specs.html#mounting-willreceiveprops)
  - label: Component updated
    frameworks:
      react: componentDidUpdate
      angular2:
        comment: none
      angular1:
        comment: none
      ember: didUpdateAttrs
      polymer:
        comment: none
      vue:
        comment: none
    remarks: |
      - **React:** [`componentDidUpdate`](https://facebook.github.io/react/docs/component-specs.html#mounting-componentdidupdate)
  - label: Before destroy
    frameworks:
      react: componentWillUnmount
      angular2:
        comment: none
      angular1:
        comment: none
      ember: willDestroyElement
      polymer:
        comment: none
      vue: beforeDestroy
    remarks: |
      - **React:** [`componentWillUnmount`](https://facebook.github.io/react/docs/component-specs.html#mounting-componentwillunmount)
  - label: After destroy
    frameworks:
      react:
        comment: none
      angular2: ngOnDestroy
      angular1: $onDestroy
      ember: didDestroyElement
      polymer: detached
      vue: destroyed
    remarks: |
      - **React** has no `componentDidUnmount` method. See [ReactClass.js#L274](https://github.com/facebook/react/blob/ba9b985406ff56c2dea192b119328b6096895097/src/isomorphic/classic/class/ReactClass.js#L274).
